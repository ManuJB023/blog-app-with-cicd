import axios from "axios";

// Configuration interface
interface AppConfig {
  apiUrl: string;
  region: string;
  environment: string;
}

// Function to load configuration
const loadConfig = async (): Promise<AppConfig> => {
  try {
    // Try to load config from config.json first (generated by CDK)
    const response = await fetch('/config.json');
    if (response.ok) {
      const config = await response.json();
      return config;
    }
  } catch (error) {
    console.warn('Could not load config.json, falling back to environment variables');
  }

  // Fallback to environment variables
  const apiUrl = process.env.REACT_APP_API_URL;
  
  if (!apiUrl) {
    throw new Error(
      'API URL not configured. Please ensure config.json exists or set REACT_APP_API_URL environment variable.'
    );
  }

  return {
    apiUrl,
    region: process.env.REACT_APP_AWS_REGION || 'us-east-1',
    environment: process.env.REACT_APP_ENVIRONMENT || 'dev',
  };
};

// Global config promise
let configPromise: Promise<AppConfig> | null = null;

// Function to get config (cached)
const getConfig = (): Promise<AppConfig> => {
  if (!configPromise) {
    configPromise = loadConfig();
  }
  return configPromise;
};

// Helper function to get API URL
const getApiUrl = async (): Promise<string> => {
  const config = await getConfig();
  // Ensure no trailing slash and add /blog endpoint
  const baseUrl = config.apiUrl.replace(/\/$/, '');
  return `${baseUrl}/blog`;
};

export const getPosts = async () => {
  const apiUrl = await getApiUrl();
  const res = await axios.get(apiUrl);
  return res.data;
};

export const createPost = async (post: { title: string; content: string; author?: string }) => {
  const apiUrl = await getApiUrl();
  const res = await axios.post(apiUrl, post);
  return res.data;
};

export const updatePost = async (id: string, post: { title: string; content: string; author?: string }) => {
  const apiUrl = await getApiUrl();
  const res = await axios.put(`${apiUrl}/${id}`, post);
  return res.data;
};

export const deletePost = async (id: string) => {
  const apiUrl = await getApiUrl();
  const res = await axios.delete(`${apiUrl}/${id}`);
  return res.data;
};

export const getPost = async (id: string) => {
  const apiUrl = await getApiUrl();
  const res = await axios.get(`${apiUrl}/${id}`);
  return res.data;
};

// Export config getter for other components that might need it
export const getAppConfig = getConfig;